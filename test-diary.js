// Script de teste para o Di√°rio Interativo
// Execute este script para verificar se tudo est√° funcionando

console.log('üß™ Testando funcionalidades do Di√°rio Interativo...\n');

// Teste 1: Verificar se o Firebase est√° configurado
console.log('1Ô∏è‚É£ Verificando configura√ß√£o do Firebase...');
try {
  // Verificar se as vari√°veis de ambiente est√£o definidas
  const requiredConfig = [
    'FIREBASE_API_KEY',
    'FIREBASE_PROJECT_ID',
    'FIREBASE_AUTH_DOMAIN'
  ];
  
  const missingConfig = requiredConfig.filter(key => !process.env[key]);
  
  if (missingConfig.length > 0) {
    console.log('‚ö†Ô∏è  Configura√ß√µes do Firebase n√£o encontradas');
    console.log('   Vari√°veis ausentes:', missingConfig.join(', '));
  } else {
    console.log('‚úÖ Configura√ß√£o do Firebase OK');
  }
} catch (error) {
  console.log('‚ùå Erro ao verificar configura√ß√£o:', error.message);
}

// Teste 2: Verificar estrutura dos arquivos
console.log('\n2Ô∏è‚É£ Verificando estrutura dos arquivos...');
const requiredFiles = [
  'src/Components/InteractiveDiary.jsx',
  'src/services/firebaseService.js',
  'src/contexts/AuthContext.jsx',
  'src/firebase.js',
  'firestore.rules',
  'firestore.indexes.json'
];

requiredFiles.forEach(file => {
  try {
    const fs = require('fs');
    if (fs.existsSync(file)) {
      console.log(`‚úÖ ${file}`);
    } else {
      console.log(`‚ùå ${file} - Arquivo n√£o encontrado`);
    }
  } catch (error) {
    console.log(`‚ùå ${file} - Erro ao verificar`);
  }
});

// Teste 3: Verificar depend√™ncias
console.log('\n3Ô∏è‚É£ Verificando depend√™ncias...');
const requiredDependencies = [
  'firebase',
  'react',
  'lucide-react'
];

try {
  const packageJson = require('./package.json');
  const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };
  
  requiredDependencies.forEach(dep => {
    if (dependencies[dep]) {
      console.log(`‚úÖ ${dep} - v${dependencies[dep]}`);
    } else {
      console.log(`‚ùå ${dep} - N√£o encontrado`);
    }
  });
} catch (error) {
  console.log('‚ùå Erro ao verificar package.json:', error.message);
}

// Teste 4: Verificar regras do Firestore
console.log('\n4Ô∏è‚É£ Verificando regras do Firestore...');
try {
  const fs = require('fs');
  const rules = fs.readFileSync('firestore.rules', 'utf8');
  
  if (rules.includes('diaryEntries')) {
    console.log('‚úÖ Regras do di√°rio configuradas');
  } else {
    console.log('‚ùå Regras do di√°rio n√£o encontradas');
  }
  
  if (rules.includes('request.auth != null')) {
    console.log('‚úÖ Autentica√ß√£o configurada');
  } else {
    console.log('‚ùå Autentica√ß√£o n√£o configurada');
  }
} catch (error) {
  console.log('‚ùå Erro ao verificar regras:', error.message);
}

// Teste 5: Verificar √≠ndices
console.log('\n5Ô∏è‚É£ Verificando √≠ndices do Firestore...');
try {
  const fs = require('fs');
  const indexes = fs.readFileSync('firestore.indexes.json', 'utf8');
  
  if (indexes.includes('diaryEntries')) {
    console.log('‚úÖ √çndices do di√°rio configurados');
  } else {
    console.log('‚ùå √çndices do di√°rio n√£o encontrados');
  }
} catch (error) {
  console.log('‚ùå Erro ao verificar √≠ndices:', error.message);
}

// Resumo final
console.log('\nüìä RESUMO DOS TESTES');
console.log('=====================');
console.log('Para usar o Di√°rio Interativo:');
console.log('');
console.log('1. ‚úÖ Certifique-se de estar logado na aplica√ß√£o');
console.log('2. ‚úÖ Configure os √≠ndices do Firestore se necess√°rio');
console.log('3. ‚úÖ Verifique as regras de seguran√ßa');
console.log('4. ‚úÖ Teste criando uma reflex√£o');
console.log('');
console.log('üîß Se houver problemas:');
console.log('- Execute: node setup-diary-indexes.js');
console.log('- Verifique o console do navegador');
console.log('- Confirme as regras do Firestore');
console.log('');
console.log('üéâ Di√°rio Interativo configurado e pronto para uso!');
